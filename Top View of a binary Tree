void fillMap(Node* root,int d,int l,map<int,pair<int,int>> &m)
{
    if(root==NULL)
    return ;

    if(m.count(d)==0)
    m[d]=make_pair(root->data,l);
    else if(m[d].second>l)
    m[d]=make_pair(root->data,l);
    fillMap(root->left,d-1,l+1,m);
    fillMap(root->right,d+1,l+1,m);
}

    void topView(Node * root) {
        
map<int,pair<int,int>> m;
int d=0;
int l=0;
fillMap(root,d,l,m);
map<int,pair<int,int>>:: iterator it;

for(it=m.begin();it!=m.end();++it)
{
    cout<<it->second.first<<" ";
}
    }


2nd method


void left_view(TreeNode * root, vector<int> &res) {
    if (!root) return;
    left_view(root->left, res);
    res.push_back(root->val);
}

void right_view(TreeNode * root, vector<int> &res) {
    if (!root) return;
    res.push_back(root->val);
    right_view(root->right, res);
}

vector<int> Solution::solve(TreeNode* root) {
    vector<int> res;
    left_view(root->left, res);
    res.push_back(root->val);
    right_view(root->right, res);
    return res;
}
