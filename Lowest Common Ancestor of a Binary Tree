/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
bool findpath(TreeNode* root,vector<TreeNode*> &v1,TreeNode* n1)
{
   if(root==NULL)
       return false;
    v1.push_back(root);
    if(root->val==n1->val)
        return true;
if((root->left && findpath(root->left,v1,n1))||(root->right && findpath(root->right,v1,n1)))
    return true;
    
    v1.pop_back();
    return false;
}
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        vector<TreeNode*> v1;
        vector<TreeNode*> v2;
        if(!findpath(root,v1,p) || !findpath(root,v2,q))
            return NULL;
        int i;
        for(i=0;i<v1.size()&&i<v2.size();i++)
        {
            if(v1[i]->val!=v2[i]->val)
                break;
        }
        return v1[i-1];
    }
};
