/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
     vector<int> v;
        stack<TreeNode*> s;
        TreeNode* curr = NULL;
        while (root || !s.empty()) {
            if (root) {
                s.push(root);
                root = root -> left;
            } else {
                TreeNode* node = s.top();
                if (node -> right && curr != node -> right) {
                    root = node -> right;
                } else {
                    v.push_back(node -> val);
                    curr = node;
                    s.pop();
                }
            }
        }
        return v;
    }
};


//2nd Method

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
     stack<TreeNode*> s;
        TreeNode* t = root;
        vector<int> v;
    
        while (!s.empty() || t) {
        
            while (t) {
                s.push(t);
                s.push(t);
                t = t->left;
            }
            
            t = s.top();
            s.pop();
            if (!s.empty() && t==s.top())
                t = t->right;
            else {
                v.push_back(t->val);
                t=NULL;
            }
                
        }
        return v;
    }
};
